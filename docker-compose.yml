version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: wood-kits-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-rootpassword}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-wood-kits}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - wood-kits-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ismaster')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wood-kits-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-root}:${MONGO_ROOT_PASSWORD:-rootpassword}@mongodb:27017/${MONGO_DATABASE:-wood-kits}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your-secure-jwt-secret}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_SEED_KEY: ${ADMIN_SEED_KEY:-seed-key-123}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      PORT: 6003
    ports:
      - "${BACKEND_PORT:-6003}:6003"
    volumes:
      - backend_logs:/app/logs
    networks:
      - wood-kits-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:6003/api/v1}
    container_name: wood-kits-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - wood-kits-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: wood-kits-nginx
    restart: unless-stopped
    profiles: ["production"]
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wood-kits-network

  # Redis Cache (Optional - for production caching)
  redis:
    image: redis:7-alpine
    container_name: wood-kits-redis
    restart: unless-stopped
    profiles: ["production"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - wood-kits-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  wood-kits-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local