name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./backend/package-lock.json

    - name: Install backend dependencies
      run: npm ci

    - name: Wait for MongoDB
      run: |
        timeout 60s bash -c 'until mongosh --host localhost:27017 --eval "print(\"Connected to MongoDB\")" --quiet; do sleep 1; done'

    - name: Run backend unit tests
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/woodkits-test
        PORT: 6003

    - name: Run backend linting
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint || echo "No lint script found, skipping"
        else
          echo "No lint script configured, skipping"
        fi

  frontend-tests:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend tests
      run: |
        if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
          npm test -- --watchAll=false --coverage --passWithNoTests
        else
          echo "No test script configured, skipping"
        fi

    - name: Run frontend linting
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint || echo "No lint script found, skipping"
        else
          echo "No lint script configured, skipping"
        fi

    - name: Build frontend
      run: npm run build
      env:
        REACT_APP_API_URL: http://localhost:6003/api/v1

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install E2E test dependencies
      run: |
        npm install --save-dev supertest jest

    - name: Wait for MongoDB
      run: |
        timeout 60s bash -c 'until mongosh --host localhost:27017 --eval "print(\"Connected to MongoDB\")" --quiet; do sleep 1; done'

    - name: Start backend server
      run: |
        cd backend
        NODE_ENV=test PORT=6003 MONGODB_URI=mongodb://localhost:27017/woodkits-test node server.js &
        echo $! > server.pid
        # Wait for server to start
        timeout 30s bash -c 'until curl -s http://localhost:6003/health > /dev/null; do sleep 1; done'
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/woodkits-test
        PORT: 6003
        ADMIN_USERNAME: admin
        ADMIN_PASSWORD: admin123

    - name: Run E2E tests
      run: |
        cd backend
        npx jest __tests__/complete-product-flow.test.js --verbose --detectOpenHandles --forceExit --testTimeout=60000
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/woodkits-test
        ADMIN_USERNAME: admin
        ADMIN_PASSWORD: admin123

    - name: Stop backend server
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid) || true
        fi
        # Kill any remaining processes on port 6003
        lsof -ti:6003 | xargs kill -9 || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install and build backend
      run: |
        cd backend
        npm ci
        echo "Backend dependencies installed successfully"

    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:6003/api/v1' }}

    - name: Run deployment checks
      run: |
        echo "‚úÖ All tests passed!"
        echo "‚úÖ Frontend build successful!"
        echo "‚úÖ Backend dependencies installed!"
        echo "üöÄ Ready for deployment!"

    # Add your deployment steps here
    # - name: Deploy to production
    #   run: |
    #     echo "Add your deployment commands here"
    #     # Example: deploy to Railway, Vercel, etc.

  notification:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Build Status Notification
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Build successful"
          echo "‚úÖ E2E tests passed"
          echo "üöÄ Ready for production"
        else
          echo "‚ùå CI/CD Pipeline failed"
          echo "Check the logs above for details"
          exit 1
        fi